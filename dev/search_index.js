var documenterSearchIndex = {"docs":
[{"location":"api/#Exported-functions-and-types","page":"API","title":"Exported functions and types","text":"","category":"section"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#Docstrings","page":"API","title":"Docstrings","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AllocCheck.check_allocs","category":"page"},{"location":"api/#AllocCheck.check_allocs","page":"API","title":"AllocCheck.check_allocs","text":"check_allocs(func, types; entry_abi=:specfunc, ret_mod=false)\n\nCompiles the given function and types to LLVM IR and checks for allocations. Returns a vector of AllocationSite structs, each containing a CallInst and a backtrace.\n\nExample\n\njulia> function foo(x::Int, y::Int)\n           z = x + y\n           return z\n       end\nfoo (generic function with 1 method)\n\njulia> allocs = check_allocs(foo, (Int, Int))\nAllocCheck.AllocationSite[]\n\n\n\n\n\n","category":"function"},{"location":"#AllocCheck","page":"Home","title":"AllocCheck","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AllocCheck.jl is a Julia package that statically checks if a function call may allocate, analyzing the generated LLVM IR of it and it's callees using LLVM.jl and GPUCompiler.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"AllocCheck operates on functions, trying to statically determine wether or not a function may allocate memory, and if so, where that allocation appears. This is different from measuring allocations using, e.g., @time or @allocated, which measures the allocations that did happen during the execution of a function. ","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main entry point to check allocations is the function check_allocs, which takes the function to check as the first argument, and a tuple of argument types as the second argument:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AllocCheck\nmymod(x) = mod(x, 2.5)\n\ncheck_allocs(mymod, (Float64,))","category":"page"},{"location":"","page":"Home","title":"Home","text":"This returned an empty array, indicating that the function was proven to not allocate any memory ðŸŽ‰","category":"page"},{"location":"","page":"Home","title":"Home","text":"When used on a function that may allocate memory","category":"page"},{"location":"","page":"Home","title":"Home","text":"linsolve(a, b) = a \\ b\n\nallocs = check_allocs(linsolve, (Matrix{Float64}, Vector{Float64}));\nlength(allocs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"we get a non-empty array of allocation instances. Each allocation instance contains some useful information, for example","category":"page"},{"location":"","page":"Home","title":"Home","text":"allocs[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"we see what type of object was allocated, and where in the code the allocation appeared.","category":"page"},{"location":"#Functions-that-throw-exceptions","page":"Home","title":"Functions that throw exceptions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some functions that we do not expect may allocate memory, like sin, actually may:","category":"page"},{"location":"","page":"Home","title":"Home","text":"length(check_allocs(sin, (Float64,)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reason for this is that sin may throw an error, and the exception object requires some allocations. We can ignore allocations that only happen when throwing errors by passing ignore_throw=true:","category":"page"},{"location":"","page":"Home","title":"Home","text":"length(check_allocs(sin, (Float64,); ignore_throw=true)) # ignore allocations that only happen when throwing errors","category":"page"},{"location":"#Limitations","page":"Home","title":"Limitations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Runtime dispatch","category":"page"},{"location":"","page":"Home","title":"Home","text":"Any runtime dispatch is conservatively assumed to allocate.","category":"page"}]
}
